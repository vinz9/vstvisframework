#include "NurbsBox.h"

/*GLfloat ctrlStart[5][5][3] = {
   {{-1.0, 0.0, 1.0}, {-0.5, 0.0, 1.0},
	{0.0, 0.0, 1.0},
    {0.5, 0.0, 1.0}, {1.0, 0.0, 1.0}}, 

	   {{-1.0, 0.0, 0.5}, {-0.5, 1.0, 0.5}, 
	   {0.0, -3.5, 0.5},
    {0.5, 1.0, 0.5}, {1.0, 0.0, 0.5}},

	 {{-1.0, 0.0, 0.0}, {-0.5, -3.5, 0.0}, 
	   {0.0, 15.0, 0.0},
    {0.5, -3.5, 0.0}, {1.0, 0.0, 0.0}},

	   {{-1.0, 0.0, -0.5}, {-0.5, 1.0, -0.5},
	   {0.0, -3.5, -0.5},
    {0.5, 01.0, -0.5}, {1.0, 0.0, -0.5}},

	   {{-1.0, 0.0, -1.0}, {-0.5, 0.0, -1.0},
	   {0.0, 0.0, -1.0},
    {0.5, 0.0, -1.0}, {1.0, 0.0, -1.0}}
};*/

GLfloat ctrlStart[5][5][3] = {
   {{0.0, 0.0, 0.0}, {0, 0.0, 0.0},
	{0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}}, 

	   {{0.0, 0.0, 0.0}, {-0.5, 1.0, 0.5}, 
	   {0.0, -3.5, 0.5},
    {0.5, 1.0, 0.5}, {0.0, 0.0, 0.0}},

	 {{0.0, 0.0, 0.0}, {-0.5, -3.5, 0.0}, 
	   {0.0, 12.0, 0.0},
    {0.5, -3.5, 0.0}, {0.0, 0.0, 0.0}},

	   {{0.0, 0.0, -0.0}, {-0.5, 1.0, -0.5},
	   {0.0, -3.5, -0.5},
    {0.5, 01.0, -0.5}, {0.0, 0.0, -0.0}},

   {{0.0, 0.0, 0.0}, {0, 0.0, 0.0},
	{0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}}
};

GLfloat ctrlFinish[5][5][3] = {
   {{0.0, 0.0, 0.0}, {0, 0.0, 0.0},
	{0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}}, 

	   {{0.0, 0.0, 0.0}, {-0.5, 1.0, 0.5}, 
	   {0.0, 4.0, 0.5},
    {0.5, 1.0, 0.5}, {0.0, 0.0, 0.0}},

	 {{0.0, 0.0, 0.0}, {-0.5, 4.0, 0.0}, 
	   {0.0, -2.0, 0.0},
    {0.5, 4.0, 0.0}, {0.0, 0.0, 0.0}},

	   {{0.0, 0.0, -0.0}, {-0.5, 1.0, -0.5},
	   {0.0, 4.0, -0.5},
    {0.5, 01.0, -0.5}, {0.0, 0.0, -0.0}},

   {{0.0, 0.0, 0.0}, {0, 0.0, 0.0},
	{0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}}
};

/*GLfloat ctrlFinish[5][5][3] = {
   {{-1.0, 0.0, 1.0}, {-0.5, 0.0, 1.0},
	{0.0, 0.0, 1.0},
    {0.5, 0.0, 1.0}, {1.0, 0.0, 1.0}}, 

	   {{-1.0, 0.0, 0.5}, {-0.5, 1.0, 0.5}, 
	   {0.0, 4.0, 0.5},
    {0.5, 1.0, 0.5}, {1.0, 0.0, 0.5}},

	 {{-1.0, 0.0, 0.0}, {-0.5, 4.0, 0.0}, 
	   {0.0, -18.0, 0.0},
    {0.5, 4.0, 0.0}, {1.0, 0.0, 0.0}},

	   {{-1.0, 0.0, -0.5}, {-0.5, 1.0, -0.5},
	   {0.0, 4.0, -0.5},
    {0.5, 01.0, -0.5}, {1.0, 0.0, -0.5}},

	   {{-1.0, 0.0, -1.0}, {-0.5, 0.0, -1.0},
	   {0.0, 0.0, -1.0},
    {0.5, 0.0, -1.0}, {1.0, 0.0, -1.0}}
};*/

GLfloat ctrlTemp[5][5][3];
GLfloat inc[5][5][3];

//----------------------------------------------------------------------------
NurbsBox::NurbsBox()
{
}

//----------------------------------------------------------------------------
NurbsBox::NurbsBox(AudioEffect* effect):Object3d(effect)
{

}

//----------------------------------------------------------------------------
NurbsBox::NurbsBox(AudioEffect* effect, float strength):Object3d(effect),st(strength)
{

l = 50;
	steps = 100;
	for (int i = 0; i<5; i++)
	{
		for (int j = 0; j <5; j++)
		{
			for (int k = 0; k <3; k++)
			{
				inc[i][j][k] = (ctrlFinish[i][j][k] - ctrlStart[i][j][k])/steps;
			}
		}

	}

	glEnable(GL_MAP2_VERTEX_3);
}

//----------------------------------------------------------------------------
NurbsBox::~NurbsBox()
{

	glDisable(GL_MAP2_VERTEX_3);
}

//----------------------------------------------------------------------------
void NurbsBox::draw()
{


	if (chemin == 0)
		{
			if((l+ *params[0] * st) < (2* steps) )
			{
				l = l + *params[0]*st;
			}
			else
			{
				chemin = 1;
			}
		}
		else
		{
			if ((l - *params[0] * st) > 0 )
			{
				l = l - *params[0] *st;
			}
			else
			{
				chemin = 0;
			}
		}

	if (l<steps)
	{
		for (int i = 0; i<5; i++)
		{
			for (int j = 0; j <5; j++)
			{
				for (int k = 0; k <3; k++)
				{
					ctrlTemp[i][j][k] = (ctrlStart[i][j][k] + inc[i][j][k]*l);
				}
			}
		}
		//l++;
	}
	else if (l<2*steps)	
	{
		for (int i = 0; i<5; i++)
		{
			for (int j = 0; j <5; j++)
			{
				for (int k = 0; k <3; k++)
				{
					ctrlTemp[i][j][k] = ctrlFinish[i][j][k] - inc[i][j][k]*(l-steps);
				}
			}
		}
		//l++;
	}
	else l = 0;

	glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 5, 0, 1, 15, 5, &ctrlTemp[0][0][0]);

	glPushMatrix();
glEnable(GL_LIGHTING);
	glPolygonMode(GL_FRONT_AND_BACK , GL_LINE);
	glLineWidth(1.0);
	glDisable(GL_LIGHTING);
	//
	//glShadeModel(GL_FLAT);
	glEnable(GL_AUTO_NORMAL);

	int x = 10;

	glMapGrid2f(x, 0.0, 1.0, x, 0.0, 1.0);

	glColor3f(1.0, 1.0, 1.0);

	glEvalMesh2(GL_LINE, 0, x, 0, x);

	/*for (int i =0; i<4; i++)
	{
		glRotatef(90,0,0,1);
		glTranslatef(0,1.0,0);
		glEvalMesh2(GL_FILL, 0, x, 0, x);
		glTranslatef(0,-1.0,0);
	}

	glRotatef(90,1,0,0);
	glTranslatef(0,1.0,0);
	glEvalMesh2(GL_FILL, 0, x, 0, x);
	glTranslatef(0,-1.0,0);
	glRotatef(180,1,0,0);
	glTranslatef(0,1.0,0);
	glEvalMesh2(GL_FILL, 0, x, 0, x);*/


	/*glPointSize(5.0);
	glDisable(GL_LIGHTING);
	glColor3f(1.0, 1.0, 0.0);
	glBegin(GL_POINTS);
	for (int i = 0; i < 5; i++) {
	for (int j = 0; j < 5; j++) {
	glVertex3f(ctrlTemp[i][j][0], 
	ctrlTemp[i][j][1], ctrlTemp[i][j][2]);
	}
	}
	glEnd();*/

	glPopMatrix();
	
	//glEnable(GL_LIGHTING);

}
